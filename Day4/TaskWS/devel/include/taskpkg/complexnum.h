// Generated by gencpp from file taskpkg/complexnum.msg
// DO NOT EDIT!


#ifndef TASKPKG_MESSAGE_COMPLEXNUM_H
#define TASKPKG_MESSAGE_COMPLEXNUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace taskpkg
{
template <class ContainerAllocator>
struct complexnum_
{
  typedef complexnum_<ContainerAllocator> Type;

  complexnum_()
    : real(0.0)
    , img(0.0)  {
    }
  complexnum_(const ContainerAllocator& _alloc)
    : real(0.0)
    , img(0.0)  {
  (void)_alloc;
    }



   typedef float _real_type;
  _real_type real;

   typedef float _img_type;
  _img_type img;





  typedef boost::shared_ptr< ::taskpkg::complexnum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::taskpkg::complexnum_<ContainerAllocator> const> ConstPtr;

}; // struct complexnum_

typedef ::taskpkg::complexnum_<std::allocator<void> > complexnum;

typedef boost::shared_ptr< ::taskpkg::complexnum > complexnumPtr;
typedef boost::shared_ptr< ::taskpkg::complexnum const> complexnumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::taskpkg::complexnum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::taskpkg::complexnum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::taskpkg::complexnum_<ContainerAllocator1> & lhs, const ::taskpkg::complexnum_<ContainerAllocator2> & rhs)
{
  return lhs.real == rhs.real &&
    lhs.img == rhs.img;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::taskpkg::complexnum_<ContainerAllocator1> & lhs, const ::taskpkg::complexnum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace taskpkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::taskpkg::complexnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::taskpkg::complexnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::taskpkg::complexnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::taskpkg::complexnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::taskpkg::complexnum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::taskpkg::complexnum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::taskpkg::complexnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa9255e8ba84f4d99fadfba39753a52b";
  }

  static const char* value(const ::taskpkg::complexnum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa9255e8ba84f4d9ULL;
  static const uint64_t static_value2 = 0x9fadfba39753a52bULL;
};

template<class ContainerAllocator>
struct DataType< ::taskpkg::complexnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "taskpkg/complexnum";
  }

  static const char* value(const ::taskpkg::complexnum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::taskpkg::complexnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 real\n"
"float32 img\n"
;
  }

  static const char* value(const ::taskpkg::complexnum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::taskpkg::complexnum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.real);
      stream.next(m.img);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct complexnum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::taskpkg::complexnum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::taskpkg::complexnum_<ContainerAllocator>& v)
  {
    s << indent << "real: ";
    Printer<float>::stream(s, indent + "  ", v.real);
    s << indent << "img: ";
    Printer<float>::stream(s, indent + "  ", v.img);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASKPKG_MESSAGE_COMPLEXNUM_H
